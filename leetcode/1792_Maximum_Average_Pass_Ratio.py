import heapq

class Solution:

    def key(self, passes: int, total: int) -> float:
        return (total - passes) / (total * (total + 1))

    def maxAverageRatio(self, classes, extraStudents: int) -> float:
        max_heap = []
        for (passes, total) in classes:
            key: float = self.key(passes, total)
            heapq.heappush(max_heap, (-key, passes, total))

        for _ in range(extraStudents):
            (oldkey, passes, total) = heapq.heappop(max_heap)
            newkey: float = self.key(passes + 1, total + 1)
            heapq.heappush(max_heap, (-newkey, passes + 1, total + 1))

        ratios = list(map(lambda n: n[1] / n[2], max_heap))
        return sum(ratios) / len(ratios)
    
if __name__ == "__main__":
    s = Solution()
    print(s.maxAverageRatio([[1,2],[3,5],[2,2]], 2))
    print(s.maxAverageRatio([[2,4],[3,9],[4,5],[2,10]], 4))
    print(s.maxAverageRatio(
        [[684,883],[254,259],[66,797],[699,987],[458,828],[441,563],[257,555],[450,872],[465,551],[12,406],[347,857],[176,265],[25,498],[662,813],[427,956],[585,1000],[20,64],[364,709],[142,594],[129,608],[142,266],[284,849],[408,578],[177,411],[92,628],[240,498],[8,182],[325,542],[513,915],[665,943],[449,953],[655,703],[232,749],[245,321],[507,704],[491,980],[231,730],[346,423],[574,626],[746,929],[670,940],[282,996],[225,662],[50,944],[74,782],[524,661],[378,899],[164,524],[785,812],[209,905],[306,320],[307,710],[566,870],[170,381],[719,719],[476,755],[88,609],[127,877],[621,919],[527,984],[387,585],[160,181],[257,437],[223,965],[584,737],[776,802],[54,507],[404,698],[653,735],[357,394],[528,866],[169,558],[42,748],[93,537],[262,828],[104,644],[274,755],[86,935],[983,999],[143,993],[632,795],[863,991],[676,704],[84,718],[456,872],[247,947],[872,995],[392,963],[822,926],[407,444],[169,932],[334,449],[130,638],[500,931],[218,983]],
        5976
    ))
